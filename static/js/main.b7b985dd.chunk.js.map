{"version":3,"sources":["constants.js","lib/Game/gameFactory.js","components/ui/Game.js","components/ui/Hangman.js","components/ui/VirtualKeyboard.js","components/ui/RestartButton.js","components/ui/LetterBlock.js","components/ui/AttemptsLeft.js","components/ui/Letter.js","components/ui/LettersRow.js","components/ui/Word.js","serviceWorker.js","index.js","components/ui/App.js"],"names":["GAME_OVER","Symbol","GAME_STARTED","GAME_WON","getBoolean","value","getInitialState","a","result","INITIAL","process","axios","gameFactory","words","gameWord","Math","floor","random","length","name","randomWord","word","letters","split","map","letter","toLocaleUpperCase","guessed","guesses","gameState","pastGuesses","Game","props","renderGameFinished","message","cssClass","className","onClick","onRestartClick","stateGame","renderWord","i","letterValue","key","hasAttemptsLeft","gameWon","content","excluded","onLetterClick","attempts","renderInputPanel","attemptsLeft","body","leftArm","rightArm","leftLeg","rightLeg","hangmanAttempts","styles","character","fill","stroke","strokeWidth","post","Hangman","width","height","points","style","x1","y1","x2","y2","cx","cy","r","VirtualKeyboard","renderRow","children","filter","indexOf","FIRST_ROW","SECOND_ROW","THIRD_ROW","x","RestartButton","LetterBlock","AttemptsLeft","Letter","LettersRow","Word","Boolean","window","location","hostname","match","ReactDOM","render","useState","isLoading","data","setData","useEffect","loading","letterObject","Object","assign","reduce","winState","currentObject","concat","guessesLeft","stateUpdate","e","preventDefault","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7b985dd.chunk.js","sourcesContent":["export const GAME_OVER = Symbol('OVER');\r\nexport const GAME_STARTED = Symbol('BEGIN');\r\nexport const GAME_WON = Symbol('WIN');\r\n\r\nexport default {\r\n  GAME_WON,\r\n  GAME_OVER,\r\n  GAME_STARTED,\r\n};\r\n","import { GAME_STARTED } from '../../constants';\r\nimport axios from \"axios\";\r\nimport INITIAL from '../../data/initial.json'\r\n\r\n\r\nconst randomWord = words => {\r\n  const wordIndex = Math.floor(Math.random() * words.length);\r\n  return words[wordIndex].name;\r\n}\r\n\r\n\r\nconst  getBoolean=(value)=>{\r\n  switch(value){\r\n       case true:\r\n       case \"true\":\r\n       case 1:\r\n       case \"1\":\r\n       case \"on\":\r\n       case \"yes\":\r\n           return true;\r\n       default: \r\n           return false;\r\n   }\r\n}\r\n\r\nexport const getInitialState = async () => {\r\n  var result = INITIAL;\r\n  if (getBoolean(process.env.REACT_APP_GET_ONLINE))\r\n    result = await axios(process.env.REACT_APP_API_WORD);\r\n  return result;\r\n};\r\n\r\nexport const gameFactory = (words) => {\r\n    const gameWord = randomWord(words);\r\n    return {\r\n      word: gameWord,\r\n      letters: gameWord.split('').map(letter => ({\r\n        value: letter.toLocaleUpperCase(),\r\n        guessed: false,\r\n      })),\r\n      guesses: 5,\r\n      gameState: GAME_STARTED,\r\n      pastGuesses: [],\r\n    };\r\n  };\r\n\r\n\r\n","import React from 'react';\r\nimport '../../stylesheets/game.css'\r\nimport {Hangman, RestartButton, VirtualKeyboard, AttemptsLeft, Word, Letter} from '../ui'\r\nimport { GAME_WON, GAME_OVER } from '../../constants'\r\n\r\n\r\nconst hangmanAttempts = (attemptsLeft) => {\r\n  let props = {\r\n    body: attemptsLeft <= 4,\r\n    leftArm: attemptsLeft <= 3,\r\n    rightArm: attemptsLeft <= 2,\r\n    leftLeg: attemptsLeft <= 1,\r\n    rightLeg: attemptsLeft === 0,\r\n  };\r\n\r\n  return <Hangman {...props} />\r\n}\r\n\r\nexport const Game = (props) => {\r\n  const renderInputPanel = () => {\r\n    const hasAttemptsLeft = props.stateGame.guesses > 0;\r\n    const gameWon = props.stateGame.gameState === GAME_WON;\r\n    const content = hasAttemptsLeft\r\n      ? gameWon\r\n        ? renderGameFinished('Congrats! ü§ó üèÜ ü§ó', 'Game-GameWin')\r\n        : (\r\n          <div className=\"Game-VirtualKeyboard\">\r\n            <VirtualKeyboard\r\n              excluded={props.stateGame.pastGuesses}\r\n              onClick={props.onLetterClick}\r\n            />\r\n          </div>\r\n        )\r\n      : renderGameFinished('GAME OVER ‚ò†Ô∏è', 'Game-GameOver');\r\n\r\n    return (\r\n      <div className=\"Game-InputPanel\">\r\n        {renderWord()}\r\n        <div className=\"Game-AttemptsLeft\">\r\n          <AttemptsLeft attempts={props.stateGame.guesses} />\r\n        </div>\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n  const renderGameFinished = (message, cssClass) => {\r\n    return (\r\n      <div className={cssClass}>\r\n        <span>{message}</span>\r\n        <RestartButton\r\n          onClick={props.onRestartClick}\r\n          gameState={props.stateGame}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderWord = ()=> {\r\n    return (\r\n      <div className=\"Game-Word\">\r\n        <Word>\r\n          {props.stateGame.letters.map((letter, i) => {\r\n            const letterValue = (\r\n              props.stateGame.gameState === GAME_OVER || letter.guessed\r\n            ) ? letter.value : '_';\r\n\r\n            return (\r\n              <Letter\r\n                key={`word-letter-${i}`}\r\n                value={letterValue}\r\n              />\r\n            );\r\n          })}\r\n        </Word>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Game-content\">\r\n      <div className=\"Game-SideBySide\">\r\n        {renderInputPanel()}\r\n        <div className=\"Game-Hangman\">\r\n          {hangmanAttempts(props.stateGame.guesses)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nconst styles = {\r\n    character: {\r\n        fill: 'none',\r\n        stroke: 'black',\r\n        strokeWidth: 3,\r\n    },\r\n    post: {\r\n        fill: 'none',\r\n        stroke: 'black',\r\n        strokeWidth: 10,\r\n    },\r\n};\r\n\r\n\r\nexport const  Hangman = (props) => {\r\n    \r\n    const renderHead = () => {\r\n        return props.body\r\n            ? <circle cx=\"320\" cy=\"190\" r=\"40\" fill=\"black\" />\r\n            : null;\r\n    }\r\n\r\n\r\n    const renderBody = () => {\r\n        return props.body\r\n            ? <line x1=\"320\" y1=\"190\" x2=\"320\" y2=\"360\" style={styles.character} />\r\n            : null;\r\n    }\r\n\r\n\r\n    const renderLeftArm = () => {\r\n        return props.leftArm\r\n            ? <line x1=\"320\" y1=\"260\" x2=\"250\" y2=\"230\" style={styles.character} />\r\n            : null;\r\n    }\r\n\r\n\r\n    const renderRightArm = () => {\r\n        return props.rightArm\r\n            ? <line x1=\"320\" y1=\"260\" x2=\"390\" y2=\"230\" style={styles.character} />\r\n            : null;\r\n    }\r\n\r\n\r\n    const renderLeftLeg = () => {\r\n        return props.leftLeg\r\n            ? <line x1=\"320\" y1=\"360\" x2=\"250\" y2=\"450\" style={styles.character} />\r\n            : null;\r\n    }\r\n\r\n\r\n    const renderRightLeg = () => {\r\n        return props.rightLeg\r\n            ? <line x1=\"320\" y1=\"360\" x2=\"390\" y2=\"450\" style={styles.character} />\r\n            : null;\r\n    }\r\n    return (\r\n        <svg width=\"500\" height=\"550\">\r\n            <polyline points=\"400,500 100,500 150,500 150,100 320,100 320,150\"\r\n                style={styles.post} />\r\n            {renderBody()}\r\n            {renderLeftArm()}\r\n            {renderRightArm()}\r\n            {renderLeftLeg()}\r\n            {renderRightLeg()}\r\n            {renderHead()}\r\n        </svg>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { LetterBlock, LettersRow } from \"../ui\";\r\nimport \"../../stylesheets/virtualKeyboard.css\";\r\n\r\nexport const VirtualKeyboard = props => {\r\n  const renderRow = letters => {\r\n    const children = letters\r\n      .filter(letter => props.excluded.indexOf(letter) === -1)\r\n      .map(letter => (\r\n        <LetterBlock\r\n          value={letter}\r\n          onClick={() => props.onClick(letter)}\r\n          key={`LetterBlock-${letter}`}\r\n        />\r\n      ));\r\n\r\n    return <LettersRow>{children}</LettersRow>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"VirtualKeyboard\">\r\n      <div key=\"First\" className=\"VirtualKeyboard-FirstRow\">\r\n        {renderRow(VirtualKeyboard.FIRST_ROW)}\r\n      </div>\r\n      <div key=\"Second\" className=\"VirtualKeyboard-SecondRow\">\r\n        {renderRow(VirtualKeyboard.SECOND_ROW)}\r\n      </div>\r\n      <div key=\"Third\" className=\"VirtualKeyboard-ThirdRow\">\r\n        {renderRow(VirtualKeyboard.THIRD_ROW)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nVirtualKeyboard.FIRST_ROW = [\r\n  \"q\",\r\n  \"w\",\r\n  \"e\",\r\n  \"r\",\r\n  \"t\",\r\n  \"y\",\r\n  \"u\",\r\n  \"i\",\r\n  \"o\",\r\n  \"p\"\r\n].map(x => x.toLocaleUpperCase());\r\nVirtualKeyboard.SECOND_ROW = [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"].map(\r\n  x => x.toLocaleUpperCase()\r\n);\r\nVirtualKeyboard.THIRD_ROW = [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\"].map(x =>\r\n  x.toLocaleUpperCase()\r\n);\r\n","import React from 'react';\r\nimport '../../stylesheets/restartButton.css';\r\nimport { GAME_WON } from '../../constants';\r\n\r\nexport const RestartButton = (props) => {\r\n    return (\r\n        <div className=\"App-Restart\">\r\n            <button onClick={props.onClick}>\r\n                {props.gameState === GAME_WON ? 'Play' : 'Try'} again\r\n          </button>\r\n        </div>\r\n    );\r\n}\r\n","\r\nimport React from 'react';\r\nimport '../../stylesheets/letterBlock.css';\r\n\r\nexport const LetterBlock = (props) => {\r\n    return (\r\n        <div onClick={props.onClick} className=\"LetterBlock\">\r\n          <span>\r\n            {props.value}\r\n          </span>\r\n        </div>\r\n      );\r\n  \r\n}\r\n","import React  from 'react';\r\nimport '../../stylesheets/attemptsLeft.css'\r\n\r\nexport const AttemptsLeft = (props) => {\r\n    return (\r\n        <div className=\"AttemptsLeft\">\r\n          <span>Retries left: <span className=\"AttemptsLeft-Number\">\r\n              {props.attempts}\r\n            </span>\r\n          </span>\r\n        </div>\r\n      );\r\n}\r\n","import React from 'react';\r\n\r\nexport const Letter = (props) => {\r\n    return (\r\n        <span className=\"Letter\">\r\n            {props.value}\r\n        </span>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"../../stylesheets/lettersRow.css\";\r\n\r\nexport const LettersRow = props => {\r\n  return <div className=\"LettersRow\">{props.children}</div>;\r\n};\r\n","import React from 'react';\r\nimport '../../stylesheets/word.css'\r\n\r\nexport const Word = props => {\r\n    return (\r\n        <div className=\"Word\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './components/ui/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { GAME_STARTED, GAME_WON, GAME_OVER } from \"../../constants\";\r\nimport { gameFactory, getInitialState } from \"../../lib/Game\";\r\n\r\nimport { Game } from \"../ui\";\r\n\r\nexport const App = () => {\r\n  const [data, setData] = useState({\r\n    words: [],\r\n    isLoading: true,\r\n    stateGame: {}\r\n  });\r\n\r\n  const onRestartClick = e => {\r\n    e.preventDefault();\r\n    setData({\r\n      ...data,\r\n      stateGame: gameFactory(data.words)\r\n    });\r\n  };\r\n\r\n  const onLetterClick = letter => {\r\n    const firstIndex = data.stateGame.word.indexOf(letter);\r\n    if (firstIndex !== -1) {\r\n      const letters = data.stateGame.letters.map(letterObject => {\r\n        if (letterObject.value === letter) {\r\n          return Object.assign({}, letterObject, {\r\n            guessed: true\r\n          });\r\n        }\r\n        return letterObject;\r\n      });\r\n\r\n      // Check if the game has been won\r\n      const gameWon = letters.reduce((winState, currentObject) => {\r\n        return winState && currentObject.guessed;\r\n      }, true);\r\n\r\n      setData({\r\n        ...data,\r\n        stateGame: {\r\n          ...data.stateGame,\r\n          ...{\r\n            letters: letters,\r\n            pastGuesses: [letter].concat(data.stateGame.pastGuesses),\r\n            gameState: gameWon ? GAME_WON : GAME_STARTED\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // Update number of attempts left\r\n      const guessesLeft = data.stateGame.guesses - 1;\r\n      let stateUpdate = {\r\n        guesses: guessesLeft\r\n      };\r\n\r\n      // Kill the game if needed\r\n      if (guessesLeft === 0) {\r\n        stateUpdate.gameState = GAME_OVER;\r\n      }\r\n\r\n      // Update the letters already tried\r\n      stateUpdate.pastGuesses = [letter].concat(data.stateGame.pastGuesses);\r\n\r\n      setData({\r\n        ...data,\r\n        stateGame: { ...data.stateGame, ...stateUpdate }\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result = await getInitialState();\r\n      setData({\r\n        words: result.data,\r\n        loading: false,\r\n        stateGame: gameFactory(result.data)\r\n      });\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      {data.isLoading ? (\r\n        <div>Loading ...</div>\r\n      ) : (\r\n        <Game\r\n          onLetterClick={onLetterClick}\r\n          onRestartClick={onRestartClick}\r\n          stateGame={data.stateGame}\r\n        />\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n"],"sourceRoot":""}